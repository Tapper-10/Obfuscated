debugX = true

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Rayfield Example Window",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Tapper",
	Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local SeedBuy = Window:CreateTab("Auto Buy Seed", nil) -- Title, Image


-- Place this in StarterPlayerScripts or a local UI button

local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local AutoGarden = false

-- CONFIGURATION
local plotPosition = Vector3.new(51.353553771972656, 0.1355232298374176, -100.98896789550781)
local foodName = "Carrot" -- This is the name sent to the remote for planting
local screen = workspace.CurrentCamera

local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local petGuiFrame = player.PlayerGui:WaitForChild("ActivePetUI").Frame.Main.ScrollingFrame

-- Simulate mouse click at world position
local function simulateMouseClickAt(pos)
	local screenPoint, onScreen = screen:WorldToViewportPoint(pos)
	if onScreen then
		VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 0)
		task.wait(0.05)
		VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 0)
	end
end

-- Equip tool that contains both "Carrot" and "Seed" in name (e.g. "Carrot Seed", "Carrot Seed Bag")
local function equipSeedTool()
	for _, tool in ipairs(backpack:GetChildren()) do
		local name = tool.Name:lower()
		if tool:IsA("Tool") and name:find("carrot") and name:find("seed") then
			tool.Parent = player.Character
			print("[AUTO] Equipped seed tool:", tool.Name)
			return
		end
	end
	warn("[AUTO] Could not find carrot seed tool.")
end

local function unequipTool()
	if player.Character then
		for _, item in ipairs(player.Character:GetChildren()) do
			if item:IsA("Tool") then
				item.Parent = backpack
				print("[AUTO] Unequipped tool:", item.Name)
			end
		end
	end
end

-- Equip any non-seed carrot tool for feeding
local function equipFoodTool()
	for _, tool in ipairs(backpack:GetChildren()) do
		local name = tool.Name:lower()
		if tool:IsA("Tool") and name:find("carrot") and not name:find("seed") then
			tool.Parent = player.Character
			print("[AUTO] Equipped food tool:", tool.Name)
			return
		end
	end
	warn("[AUTO] Could not find valid carrot food tool (excluding seeds).")
end

-- Get all pet IDs from PetsPhysical
local function getAllPetIds()
	local PetsPhysical = workspace:WaitForChild("PetsPhysical")
	local petIds = {}

	for _, petMover in ipairs(PetsPhysical:GetChildren()) do
		for _, obj in ipairs(petMover:GetChildren()) do
			if not obj:IsA("BasePart") and obj.Name:match("{.*}") then
				table.insert(petIds, obj.Name)
			end
		end
	end

	return petIds
end

-- Check hunger bar of a given pet ID
local function petNeedsFood(petId)
	local guiPet = petGuiFrame:FindFirstChild(petId)
	if guiPet then
		local bar = guiPet:FindFirstChild("PetStats")
			and guiPet.PetStats:FindFirstChild("HUNGER")
			and guiPet.PetStats.HUNGER:FindFirstChild("HUNGER_BAR")

		if bar then
			local hungerLevel = bar.Size.X.Scale
			return hungerLevel < 0.9
		end
	end
	return false
end

-- Main automation loop
local function AutoGardenCycle()
	coroutine.wrap(function()
		while AutoGarden do
			task.wait(0.1)

			-- 1. Equip seed tool and plant
			equipSeedTool()
			task.wait(0.2)

			local args = {
				[1] = plotPosition,
				[2] = foodName
			}
			ReplicatedStorage.GameEvents.Plant_RE:FireServer(unpack(args))
			print("[AUTO] Planted:", foodName)

			task.wait(0.2) -- Ensure planting
			unequipTool() -- Unequip seed tool
			
			-- 2. Wait for plant to grow
			task.wait(8)
			-- 3. Harvest
			task.wait(0.5)
			simulateMouseClickAt(plotPosition)
			print("[AUTO] Harvested plant")

			-- 4. Equip food tool for feeding
			equipFoodTool()
			task.wait(0.2)
			-- 5. Feed hungry pets
			local petIds = getAllPetIds()
			for _, petId in ipairs(petIds) do
				if petNeedsFood(petId) then
					equipFoodTool()
					task.wait(0.1)
					local success, err = pcall(function()
						local feedArgs = {
							[1] = "Feed",
							[2] = petId
						}
						ReplicatedStorage.GameEvents.ActivePetService:FireServer(unpack(feedArgs))
					end)

					if success then
						print("[AUTO] Fed pet with ID:", petId)
					else
						warn("[AUTO] Feeding failed for pet", petId, "->", err)
						task.wait(1)
						unequipTool()
					end
					task.wait(0.2)
				else
					print("[AUTO] Pet", petId, "is not hungry.")
				end
			end
			task.wait(1)
		end
	end)()
end

-- UI Toggle (assumes SeedBuy exists in your UI system)
local AutoGardenToggle = SeedBuy:CreateToggle({
	Name = "Auto Garden",
	CurrentValue = false,
	Flag = "ToggleAutoGarden",
	Callback = function(Value)
		AutoGarden = Value
		if AutoGarden then
			AutoGardenCycle()
		end
	end,
})






local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")

local AutoSubmitFox = false
local mutationIncludes = { "tranq", "corrupt" }

-- === FUNCTIONS ===

-- Equip item that includes all specified keywords
local function equipItemWithKeywords(keywords)
	for _, tool in ipairs(backpack:GetChildren()) do
		if tool:IsA("Tool") then
			local name = tool.Name:lower()
			local matchesAll = true

			for _, keyword in ipairs(keywords) do
				if not name:find(keyword) then
					matchesAll = false
					break
				end
			end

			if matchesAll then
				tool.Parent = player.Character
				print("[AUTO] Equipped:", tool.Name)
				return true
			end
		end
	end
	warn("[AUTO] No tool found with keywords:", table.concat(keywords, ", "))
	return false
end

-- Submit to fox once
local function submitToFox()
	if equipItemWithKeywords(mutationIncludes) then
		task.wait(0.2)
	end

	local args = { "SubmitToFox" }
	ReplicatedStorage.GameEvents.ZenQuestRemoteEvent:FireServer(unpack(args))
	print("[AUTO] Submitted to fox.")
end

-- Repeated loop while toggle is on
local function startAutoSubmit()
	coroutine.wrap(function()
		while AutoSubmitFox do
			submitToFox()
			task.wait(5) -- Adjust delay as needed
		end
	end)()
end

-- === UI Toggle ===
local AutoSubmitToggle = SeedBuy:CreateToggle({
	Name = "Auto Submit to Fox",
	CurrentValue = false,
	Flag = "ToggleAutoSubmitFox",
	Callback = function(Value)
		AutoSubmitFox = Value
		if AutoSubmitFox then
			startAutoSubmit()
		end
	end,
})







local PlantCarrot = SeedBuy:CreateButton({
	Name = "Plant Carrot",
	Callback = function()

		-- Script generated by SimpleSpy - credits to exx#9394
		wait(0.1)
		local args = {
			[1] = Vector3.new(54.1524314880371094, 0.13552513718605042, 20.11961364746094),
			[2] = "Carrot"
		}

		game:GetService("ReplicatedStorage").GameEvents.Plant_RE:FireServer(unpack(args))


	end
})


local AutoPlantSeed = false -- Control flag for the coroutine

local function AutoPlantSeeds()
	coroutine.wrap(function()
		while AutoPlantSeed do
			task.wait(0.01)

			local args = {
				[1] = Vector3.new(54.1524314880371094, 0.13552513718605042, 20.11961364746094),
				[2] = "BlueBerry"
			}

			game:GetService("ReplicatedStorage").GameEvents.Plant_RE:FireServer(unpack(args))

		end
	end)()
end

local AutoPlant = SeedBuy:CreateToggle({
	Name = "Auto Plant",
	CurrentValue = false,
	Flag = "ToggleFind",
	Callback = function(Value)
		AutoPlantSeed = Value -- Update the running state based on the toggle value
		if AutoPlantSeed then
			AutoPlantSeeds() -- Start the teleport loop
		end
	end,
})

-- Script generated by SimpleSpy - credits to exx#9394

-- Script generated by SimpleSpy - credits to exx#9394

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local selectedEggs = {}

-- ✅ Get Egg names from GUI dynamically
local function getEggsFromGUI()
	local eggFrame = player.PlayerGui:WaitForChild("PetShop_UI"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
	local eggNames = {}

	for _, child in ipairs(eggFrame:GetChildren()) do
		if child:IsA("Frame") and not child.Name:find("Padding") then
			table.insert(eggNames, child.Name)
		end
	end

	return eggNames
end

-- ✅ Egg selection dropdown
local selectedEggs = {}

-- Create dropdown once using current egg list
local EggDropdown = SeedBuy:CreateDropdown({
	Name = "Select Eggs to Buy",
	Options = getEggsFromGUI(), -- Use once at UI load
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "EggDropdown",
	Callback = function(options)
		selectedEggs = options
	end,
})

local autoBuyingEggs = false

local AutoBuyEggsToggle = SeedBuy:CreateToggle({
	Name = "Auto Buy Eggs",
	CurrentValue = false,
	Flag = "ToggleAutoBuyEggs",
	Callback = function(Value)
		autoBuyingEggs = Value
		if autoBuyingEggs then
			coroutine.wrap(function()
				while autoBuyingEggs do
					task.wait(1)
					for _, egg in ipairs(selectedEggs) do
						ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(egg)
						print("[EGG] Bought:", egg)
					end
				end
			end)()
		end
	end,
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local SelectedSeeds = {}

-- Static list read once from GUI at the time of UI creation
local function getSeedListFromGUI()
	local seedFrame = player.PlayerGui:WaitForChild("Seed_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
	local seeds = {}

	for _, item in ipairs(seedFrame:GetChildren()) do
		if item:IsA("Frame") and not item.Name:lower():find("padding") then
			table.insert(seeds, item.Name)
		end
	end

	return seeds
end

local SeedDropdown = SeedBuy:CreateDropdown({
	Name = "Select Seeds to Auto Buy",
	Options = getSeedListFromGUI(),
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "SeedDropdown",
	Callback = function(Options)
		SelectedSeeds = Options
	end,
})

local runningAutoBuySeeds = false

local AutoBuySeedsToggle = SeedBuy:CreateToggle({
	Name = "Auto Buy Selected Seeds",
	CurrentValue = false,
	Flag = "ToggleAutoBuySeeds",
	Callback = function(Value)
		runningAutoBuySeeds = Value
		if runningAutoBuySeeds then
			coroutine.wrap(function()
				while runningAutoBuySeeds do
					task.wait(1)
					for _, seed in ipairs(SelectedSeeds) do
						local seedName = seed
						ReplicatedStorage.GameEvents.BuySeedStock:FireServer(seedName)
						print("[SEED] Bought:", seedName)
					end
				end
			end)()
		end
	end,
})


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local selectedMerchantItems = {}

-- ✅ Get merchant item names dynamically from the GUI
local function getMerchantItemsFromGUI()
	local merchantFrame = player.PlayerGui:WaitForChild("Gear_Shop"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
	local items = {}

	for _, child in ipairs(merchantFrame:GetChildren()) do
		if child:IsA("Frame") and not child.Name:find("Padding") then
			table.insert(items, child.Name)
		end
	end

	return items
end

-- ✅ Create dropdown ONCE with current GUI data
local MerchantDropdown = SeedBuy:CreateDropdown({
	Name = "Select Merchant Items",
	Options = getMerchantItemsFromGUI(),
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "MerchantDropdown",
	Callback = function(options)
		selectedMerchantItems = options
	end,
})

-- ✅ Toggle for auto-buying merchant items
local autoBuyMerchant = false

local AutoBuyMerchantToggle = SeedBuy:CreateToggle({
	Name = "Auto Buy Merchant Items",
	CurrentValue = false,
	Flag = "ToggleAutoBuyMerchant",
	Callback = function(Value)
		autoBuyMerchant = Value
		if autoBuyMerchant then
			coroutine.wrap(function()
				while autoBuyMerchant do
					task.wait(1)
					for _, item in ipairs(selectedMerchantItems) do
						ReplicatedStorage.GameEvents.BuyGearStock:FireServer(item)
						print("[MERCHANT] Bought:", item)
					end
				end
			end)()
		end
	end,
})



local MiscTab = Window:CreateTab("Misc", nil) -- Title, Image

local Button2 = MiscTab:CreateButton({
	Name = "Simple Spy",
	Callback = function()
		loadstring(game:HttpGet("https://github.com/exxtremestuffs/SimpleSpySource/raw/master/SimpleSpy.lua"))()
	end
})

local Button3 = MiscTab:CreateButton({
	Name = "Dex",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV3.lua", true))()
	end
})

local Button4 = MiscTab:CreateButton({
	Name = "Anti-AFK",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Anti-Kick/main/Anti-Kick.lua"))()
	end
})

local TpTab = Window:CreateTab("Teleports", nil) -- Title, Image


local MooseTP = TpTab:CreateButton({
	Name = "Moose",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(374, 134, 229) -- Teleport player

		else

		end
	end
})


local AncientSpotTP = TpTab:CreateButton({
	Name = "Ancient Spot",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(5826, 153, 337) -- Teleport player

		else

		end
	end
})

local RelicsTP = TpTab:CreateButton({
	Name = "Relics Buy",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-932, 227, -993) -- Teleport player

		else

		end
	end
})

local EnchantRodTP = TpTab:CreateButton({
	Name = "Enchant Rod",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(1308, -805, -106) -- Teleport player

		else

		end
	end
})

local AncientPondTP = TpTab:CreateButton({
	Name = "Ancient Pond",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(6038, 198, 309) -- Teleport player

		else

		end
	end
})

local TheDeepTP = TpTab:CreateButton({
	Name = "The deep",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-1660, -212, -2844) -- Teleport player

		else

		end
	end
})

local VertigoBottomTP = TpTab:CreateButton({
	Name = "Vertigo Bottom",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-108, -730, 1205) -- Teleport player

		else

		end
	end
})

local VertigUpTP = TpTab:CreateButton({
	Name = "Vertigo Up",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-109, -513, 1134) -- Teleport player

		else

		end
	end
})

local TheDepthsTP = TpTab:CreateButton({
	Name = "The Depths",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(971, -736, 1375) -- Teleport player

		else

		end
	end
})

local SundialTotemTP = TpTab:CreateButton({
	Name = "Sundial Totem",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-1145, 135, -1066) -- Teleport player

		else

		end
	end
})


local AuroraTotemTP = TpTab:CreateButton({
	Name = "Aurora Totem",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-1808, -135, -3284) -- Teleport player

		else

		end
	end
})

local RodOfTheDepthsTP = TpTab:CreateButton({
	Name = "Rod Of The Depths",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(1689, -902, 1437) -- Teleport player

		else

		end
	end
})

local RodOfTheDepthsTP = TpTab:CreateButton({
	Name = "Christmas",
	Callback = function()
		-- Teleport the local player to the position of a specific object
		local player = game.Players.LocalPlayer
		local character = player.Character
		local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

		if humanoidRootPart then
			humanoidRootPart.CFrame = CFrame.new(-122, 292, -9741) -- Teleport player

		else

		end
	end
})
